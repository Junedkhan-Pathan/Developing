                    ----------NodeJS---------

- It is JS runtime Enviroment built in chome v8 JS engine.
-V8 engine + C++ program + sum Funcionality = NodeJS.


mkdir <NameOfFolder>   -to make folder
cd ..                  -back to in 
cd <Name of folder>    -to change directory

NPM    -Node Package Manager

(function(exports,require,module,__filename,__dirname){
                                                                -npm structure to wrap the code in module.
})()

npm init                          -to create Package.
npm i/install <NameOfpckge>       -to install Package
npm i cli-color                    -color Package
npm i -D nodemon                  - -D use for deonte use in only devlopment not for use in production

Module import/export :
module.export = {<varname>,..}         -to export It
const <Name> = require("./")          -to import in the other file or module


local modules: We create JS file and do export and use in other file that file is called LOCAL MODULE.

Core modules : Nodejs inbuilt mudule is called core..Like Path,OS,HTTP etc...

1. PATH MODULE: - 
const path = require('path')
// console.log(__filename);              //Return the wholw file path
// console.log(path.dirname(__filename));   // It return directery path
// console.log(path.basename(__filename));     //It return just base file that is just file name
//console.log(path.extname(__filename));     //to know their extension name
 
// Parse 
// console.log(path.parse(__filename));   //it Return the inforamation about file in form OBJ.
 
//join  - it is used for the join the path,folder,and file to one path. like as
//console.log(path.join(__dirname,'newFlderOrPath','FileName.js'));
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

2.FILE SYSTEM MODULES..  : 
   const fs = require('fs')

// 1. For create the foler :

// fs.mkdir(path.join(__dirname,'/flderName'),(err)=>{
//     if(err){
//         console.log(err)     //err : to find about type of error OR we use something w.w.
//         return
//     }
//     console.log('Folder created Succesfully and name is',path.basename("/fldername"))
// })

//  2.For Crating the FILE:

// fs.writeFile(path.join(__dirname,'flderName','test.txt'),"Now we are learing File creating in fs",
// (err)=>{
//     if(err){
//         console.log(err)
//         return
//     }
//     console.log("NEW FILE Created and content added succesfully..");
// })  
//NOTE:If we run then again& again nothig will change bcz it just erase old data and add new...
    
    3.APPENDFILE : overcome the above we use append instance of writeFile... like as..

// fs.appendFile(path.join(__dirname,'flderName','test.txt'),"Now data is Append instant of erase old data\n",(err)=>{
//     if(err){
//         // console.log(err)
//         throw err;
//         return
//     }
//     console.log("Now data are uppend instand of erase old data");
// })

    4. READ FILES :-

fs.readFile(path.join(__dirname,'flderName','test.txt'),(err,data) =>{
  if(err){
      throw err;
      return
  }  
    // let humanReadableData = Buffer.from(data)   //we doing it for string data.if we not do then it give buffer data an .toString is convert it into string.
   //console.log(humanReadableData.toString())
   console.log(data.toString())
})
//  OR just add one parameter " 'utf-8' " to get proper dadta like as 

 fs.readFile(path.join(__dirname,'flderName','test.txt'),'utf-8',(err,data) =>{
     if(err){
         throw err;
         return
     }  
      console.log(data)
   })
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

3.OS Module : This maodel is used when make the application like server monitoring etc..
const os = require('os') 

type());         -For know Name of OS.
platform());     -For know Name of Platform. Both are same.
arch())          -For know about CPU architecthure
totalmem())      -For know about total memory
freemem())       -For know about free memory
cpus())          -For know about CPU full details
uptime())        -For know about CPU start time
             etc.....
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

4.Event Module : It's very importand module mainly used for one call and multiple lisner...

s-1: const Emitter = require('events')  //This is one type of class.
s-2: const myEmitter = new Emitter()    //We make it instance to use their inbuilt methods.

myEmitter.on('anyNameYouWant',(data)=>{
      console.log(`This is First lisner write logic you want....`)
 })
myEmitter.on('anyNameYouWant',(data)=>{
      console.log(`This is Second lisner write logic you want....`)
 })
myEmitter.on('anyNameYouWant',(data)=>{
      console.log(`This is N Number... lisner write logic you want....`)
 })

myEmitter.emit('anyNameYouWant',"Junedkhan"); // it is we can say Caller and "On" is lisner.

=>small example of it use:
class learn extends Emitter{
     register(U_name){
       console.log(`${U_name} Welcome you riched here...`)
       this.emit('email',U_name)
     }
}
const learnObj = new learn()

learnObj.on('email',(data)=>{
        console.log(`${data}...This First Register Email`)
})
learnObj.on('email',(data)=>{
        console.log(`${data}...This Second Verify Email`)
})
learnObj.on('email',(data)=>{
        console.log(`${data}...This Third  Welcome Email`)
})

learnObj.register("Mr.Pathan")
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
5.HTTP Modules :-

const http = require('http')


const app = http.createServer((req,res) =>{

//        // console.log(req.url)
        // res.writeHead(200,{
        //         'Content-Type':'text/html '
        // })

//         if(req.url === '/'){
//         fs.readFile(path.join(__dirname,'public','index.html'),(err,content)=>{
                  
//               if(err){
//                      throw err;
//               }
//               res.end(content);
//       })
//         }else if(req.url === '/about'){
              
//           fs.readFile(path.join(__dirname,'public','About.html'),(err,content)=>{
                
//                         console.log(req.url);    
//                  if(err){
//                         throw err;
//                  }
//                  res.end(content);
//          })

//         }
let  filePath = path.join(__dirname,'public',req.url == '/' ? 'index.html':req.url)

let contentType = 'text/html';
const ext = path.extname(filePath)
 
if(!ext) {
        filePath += '.html';
}

   
  switch(ext){
        
        case '.css':
                contentType = 'text/css';
                break

        case '.js':
                contentType = 'text/javascript';
                break

        default :
                contentType = 'text/html'
        }
  

      fs.readFile(filePath,(err,content)=>{

              if(err){
                //       res.write("SMW");
                fs.readFile(path.join(__dirname,'public','error.html'),(err,data)=>{
                        if(err){
                                res.writeHead(500)
                                res.end('Something went wrong.')
                                

                        }else{
                                res.writeHead(404,{
                                 'Content-Type': contentType
                                        })

                        res.end(data)
                        }
                        
                })
              }else{
                res.writeHead(200,{
                        'Content-Type': contentType
                })
                res.end(content);
                
        }
      }) 

   
})

const PORT = process.env.PORT || 3000

app.listen(PORT,()=>{
  console.log(`Server Established on port number ${PORT}`);
})









